# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
from telebot.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
from settings import config
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
from data_base.dbalchemy import DBManager
from emoji import emojize
from datetime import datetime

from settings import utility


class Keyboards:
    """
    –ö–ª–∞—Å—Å Keyboards –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞
    """
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏

    def __init__(self):
        self.markup = None
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        self.BD = DBManager()

    def set_btn(self, name, step=0, quantity=0, userid=0):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ –≤—Ö–æ–¥–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        """

        return KeyboardButton(config.KEYBOARD[name])

    # –†–∞–±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    def start_menu(self):
        '''
        —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é (–∫–Ω–æ–ø–æ—á–Ω—ã–º)
        '''
        self.markup = ReplyKeyboardMarkup(True, True)
        itm_btn_1 = self.set_btn('INBOX')
        itm_btn_2 = self.set_btn('EVENT')
        itm_btn_3 = self.set_btn('FOLDERS')
        itm_btn_4 = self.set_btn('INFO')
        itm_btn_5 = self.set_btn('SETTINGS')
        # —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        self.markup.row(itm_btn_1, itm_btn_2, itm_btn_3)
        self.markup.row(itm_btn_4, itm_btn_5)
        return self.markup

    def back_menu(self):
        '''
        —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é info
        '''
        self.markup = ReplyKeyboardMarkup(True, True)
        itm_btn_1 = self.set_btn('<<')
        # —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        self.markup.row(itm_btn_1)
        return self.markup

    def cancel_menu(self):
        '''
        —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é info
        '''
        self.markup = ReplyKeyboardMarkup(True, True)
        itm_btn_1 = self.set_btn('X')
        # —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        self.markup.row(itm_btn_1)
        return self.markup

    def settings_menu(self, userid):
        '''
        —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é settings
        '''
        self.markup = ReplyKeyboardMarkup(True, True)

        if self.BD.show_settings("lang", userid) == "RU":
            itm_btn_1 = self.set_btn('LANGRU')
        elif self.BD.show_settings("lang", userid) == "EN":
            itm_btn_1 = self.set_btn('LANGEN')
        else:
            itm_btn_1 = self.set_btn('X')
        itm_btn_2 = self.set_btn('HARD', userid=userid)
        itm_btn_3 = self.set_btn('CHANGE_NAME')
        itm_btn_4 = self.set_btn('<<')
        # —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        self.markup.row(itm_btn_1, itm_btn_2)
        self.markup.row(itm_btn_3, itm_btn_4)
        return self.markup

    def remove_menu(self):
        '''
        —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
        '''

        return ReplyKeyboardRemove()



    def set_inline_btn(self, name, id):
        '''
        :param name: –∏–º—è –∫–Ω–æ–ø–∫–∏
        :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
        '''

        return InlineKeyboardButton(str(name),
                                    callback_data=id)

    #–í—Ö–æ–¥—è—â–∏–µ
    def set_inline_inbox(self, teleid):
        '''
        :param name: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ø–∞–ø–∫–∏ "–í—Ö–æ–¥—è—â–∏–µ"
        '''
        inbox_list = self.BD.select_all_inbox_by_user(teleid)
        self.markup = InlineKeyboardMarkup(row_width=2)
        if inbox_list:
            mass = []
            for el in inbox_list:
                if el[2]:
                    self.markup.row(self.set_inline_btn(el[0], "i.task." + str(el[1])))
                else:
                    text = utility.strike(el[0])
                    mass.append([emojize("Ô∏è‚úÖ ") + text, "i.task." + str(el[1])])
            for el in mass:
                self.markup.row(self.set_inline_btn(el[0], el[1]))
            self.markup.row(self.set_inline_btn(emojize("‚ö™ –í—ã–±—Ä–∞—Ç—å"), "i.1.None"), self.set_inline_btn(emojize("üìÜ –í —Å–æ–±—ã—Ç–∏—è"), "i.2.None"))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "back"))
        return self.markup


    def set_inline_inbox_event(self, teleid):
        '''
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –≤ —Å–æ–±—ã—Ç–∏—è
        :param teleid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ø–∞–ø–∫–∏ "–≤—Ö–æ–¥—è—â–∏–µ"
        '''
        self.markup = InlineKeyboardMarkup(row_width=1)
        if self.BD.select_all_inbox_by_user(teleid):
            for el in self.BD.select_all_inbox_by_user(teleid):
                self.markup.add(self.set_inline_btn(emojize(el[0] + " üì§"), "i.event." + str(el[1])))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "d.back"))
        return self.markup

    def set_inline_inbox_task(self, teleid):
        '''
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á —Å —Ü–µ–ª—å—é –∏—Ö –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É
        :param teleid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: "—É–¥–∞–ª–∏—Ç—å" –∏ "–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫—É"
        '''
        self.markup = InlineKeyboardMarkup(row_width=2)
        '''
        –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        '''
        text = "üîò –í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        if self.BD.select_all_inbox_by_user(teleid):
            choise = self.BD.show_task_bufer(teleid)
            complete_task = []
            alltask = self.BD.select_all_inbox_by_user(teleid)
            for el in alltask:
                print("choise", el, choise)
                if el[1] not in choise and el[2]:
                    print(choise)
                    self.markup.add(self.set_inline_btn(emojize("‚ö™Ô∏è") + emojize(el[0]), "i.choise." + str(el[1])))
                elif el[1] in choise and el[2]:
                    self.markup.add(self.set_inline_btn(emojize("üîò") + emojize(el[0]), "i.choise." + str(el[1])))
                elif el[1] not in choise and not el[2]:
                    text = utility.strike(el[0])
                    complete_task.append([emojize("‚ö™ Ô∏èÔ∏è") + emojize("Ô∏è‚úÖ ") + text, "i.choise." + str(el[1])])
                elif el[1] in choise and not el[2]:
                    text = utility.strike(el[0])
                    complete_task.append([emojize("üîò ") + emojize("Ô∏è‚úÖ ") + text, "i.choise." + str(el[1])])
            print(complete_task)
            for el in complete_task:
                self.markup.add(self.set_inline_btn(el[0], el[1]))
            if len(choise) == len(alltask):
                text = "‚ö™Ô∏èÔ∏è –°–Ω—è—Ç—å –≤—ã–±–æ—Ä"
            else:
                text = "üîò –í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        self.markup.row(self.set_inline_btn(emojize("üìÅ –í –ø–∞–ø–∫—É"), "i.folder.None"),self.set_inline_btn(emojize(text), "i.select.None"), self.set_inline_btn(emojize("‚ùå –£–¥–∞–ª–∏—Ç—å"), "i.del.None"))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "d.back"))
        return self.markup


    def show_relocate_folder_inbox(self, teleid):
        '''
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ
        :param teleid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        '''
        self.markup = InlineKeyboardMarkup(row_width=2)
        tasks = self.BD.show_task_bufer(teleid)
        if bool(tasks):
            for el in self.BD.select_all_folders_from_user(teleid):
                self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]), "i.relocdomass." + str(el[2])))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "d.back"))
        return self.markup

    #–†–∞–±–æ—Ç–∞ —Å –ø–∞–ø–∫–∞–º–∏
    def set_inline_folders(self, teleid):
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã–µ –µ–º—É
        :param teleid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫
        '''
        self.markup = InlineKeyboardMarkup(row_width=2)
        shared = ""
        if bool(self.BD.select_all_folders_from_user(teleid)):
            for el in self.BD.select_all_folders_from_user(teleid):
                if el[3]:
                    shared = emojize(" üîó")
                else:
                    shared = ""
                self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]) + shared, "f." + str(el[2])))
        if bool(self.BD.show_share_folder(teleid)):
            for el in self.BD.show_share_folder(teleid):
                self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]) + " üë•", "f.sharedtask." + str(el[2]) + "." + str(el[3])))
        self.markup.row(self.set_inline_btn(emojize("‚ûï –°–æ–∑–¥–∞—Ç—å"), "f.new"), self.set_inline_btn(emojize("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), "f.edit"))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "back"))
        return self.markup

    #–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    def set_inline_emoji(self, id, content):
        self.markup = InlineKeyboardMarkup(row_width=3)
        icons = []
        lable = ""
        if content == "folder":
            icons = config.FICON
            lable = "f.newicon"
        elif content == "task":
            icons = config.TICON
            lable = "t.newicon"
        elif content == "event":
            icons = config.EICON
            lable = "e.newicon"
        for i in range(0, len(icons), 3):
            self.markup.row(self.set_inline_btn(emojize(icons[i]), lable + "." + str(i) + "." +  str(id)), self.set_inline_btn(emojize(icons[i+1]), lable + "." + str(i+1) + "." +  str(id)), self.set_inline_btn(emojize(icons[i+2]), lable + "." + str(i+2) + "." +  str(id)))
        self.markup.add(self.set_inline_btn(emojize("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©"), lable + ".next." + str(id)))
        return self.markup


    def set_inline_folders_edit(self, teleid):
        '''
        —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
        '''
        self.markup = InlineKeyboardMarkup(row_width=1)

        if bool(self.BD.select_all_folders_from_user(teleid)):
            for el in self.BD.select_all_folders_from_user(teleid):
                self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]) + " ‚úèÔ∏è", "f.editfolder." + str(el[2])))
        if bool(self.BD.show_share_folder(teleid)):
            for el in self.BD.show_share_folder(teleid):
                self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]) + " üë•"+ " ‚úèÔ∏è", "f.editfolder." + str(el[2]) + "." + str(el[3])))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "f.mine"))
        return self.markup

    def edit_folder_settings(self, folderid):
        '''
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
        '''
        self.markup = InlineKeyboardMarkup(row_width=3)
        self.markup.row(self.set_inline_btn(emojize("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"), "f.rename."  + str(folderid)),
                        self.set_inline_btn(emojize("üåÖ –ó–Ω–∞—á–æ–∫"), "f.reicon."  + str(folderid)),
                        self.set_inline_btn(emojize("‚ùå –£–¥–∞–ª–∏—Ç—å"), "f.del."  + str(folderid)))
        self.markup.row(self.set_inline_btn(emojize("#Ô∏è‚É£ –¢–µ–≥"), "f.teg."  + str(folderid)),
                        self.set_inline_btn(emojize("üë• –û–±—â–∏–π –¥–æ—Å—Ç—É–ø"), "f.share."  + str(folderid)),
                        self.set_inline_btn(emojize("üìß –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"), "f.export."  + str(folderid)))
        self.markup.row(self.set_inline_btn(emojize("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"), "f.slide.l."  + str(folderid)),
                        self.set_inline_btn(emojize("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"), "f.slide.r."  + str(folderid)))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "f.mine"))
        return self.markup

    def edit_shared_folder_settings(self, folderid):
        '''
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –ø–∞–ø–æ–∫
        '''
        self.markup = InlineKeyboardMarkup(row_width=1)
        self.markup.row(self.set_inline_btn(emojize("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), "f.mine"),
                        self.set_inline_btn(emojize("üíî –†–∞–∑–æ—Ä–≤–∞—Ç—å —Å–≤—è–∑—å"), "s.cancel."  + str(folderid)))
        return self.markup

    def folder_shared(self, idfolder):
        self.markup = InlineKeyboardMarkup(row_width=2)
        self.markup.row(self.set_inline_btn(emojize("üì∂ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞"), "s.change."  + str(idfolder)),
                        self.set_inline_btn(emojize("üíî –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø"), "s.cancel."  + str(idfolder)))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "f.mine"))
        return self.markup

    def set_access_lvl(self, idfolder):
        self.markup = InlineKeyboardMarkup(row_width=1)
        i = 0
        for el in config.access_level:
            self.markup.add(self.set_inline_btn(el, "s.alvl." + str(idfolder) + "." + str(i)))
            i += 1
        self.markup.add(self.set_inline_btn(emojize("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), "f.mine"))
        return self.markup

    def folder_not_shared(self, idfolder):
        self.markup = InlineKeyboardMarkup(row_width=1)
        self.markup.add(self.set_inline_btn(emojize("üó£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"), "s.invite."+ str(idfolder)))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "f.mine"))
        return self.markup



    def show_task_in_folder(self, teleid, folderid):
        '''
        –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–¥–∞—á –≤ –ø–∞–ø–∫–µ
        '''
        access_lvl = -1
        friendid = False
        if not self.BD.is_folder_owner(folderid, teleid):
            friendid = teleid
            access_lvl = self.BD.is_already_share(folderid)[1]
            teleid = self.BD.find_teleid(self.BD.folder_owner(folderid))
            print(f"teleid: {teleid}, friendid: {friendid}")
        self.markup = InlineKeyboardMarkup(row_width=2)
        if bool(self.BD.select_all_tasks_from_folder(teleid, folderid)):
            print("del_all_task_in_bufer", self.BD.del_all_task_in_bufer(teleid))
            complete_task = []
            for el in self.BD.select_all_tasks_from_folder(teleid, folderid):
                if el[3]:
                    self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]) , "t.list." + str(el[2]) + "." + str(folderid)))
                else:
                    text = utility.strike(el[1])
                    complete_task.append([emojize("Ô∏è‚úÖ ") + emojize(el[0]) + text, "t.list." + str(el[2]) + "." + str(folderid)])
            for el in complete_task:
                self.markup.add(self.set_inline_btn(el[0], el[1]))
        #–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø–∞–ø–∫–∏, –ª–∏–±–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á

        if not friendid or access_lvl == 4:
             self.markup.row(self.set_inline_btn(emojize("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), "t.edit." + str(folderid)), self.set_inline_btn(emojize("‚ö™Ô∏è –í—ã–±—Ä–∞—Ç—å"), "t.choise." + str(folderid)))
        self.markup.row(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "t.back1." + str(folderid)), self.set_inline_btn(emojize("Ô∏èüîÑ –û–±–Ω–æ–≤–∏—Ç—å"), "t.list." + str(teleid) + "." + str(folderid)))
        return self.markup


    def show_task_in_folder_for_edit(self, teleid, folderid):
        '''
        –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–¥–∞—á –≤ –ø–∞–ø–∫–µ
        '''
        if not self.BD.is_folder_owner(folderid, teleid):
            friendid = teleid
            teleid = self.BD.find_teleid(self.BD.folder_owner(folderid))
        self.markup = InlineKeyboardMarkup(row_width=2)
        if bool(self.BD.select_all_tasks_from_folder(teleid, folderid)):
            print("del_all_task_in_bufer", self.BD.del_all_task_in_bufer(teleid))
            complete_task = []
            for el in self.BD.select_all_tasks_from_folder(teleid, folderid):
                if el[3]:
                    self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]) + " ‚úè", "t.task." + str(el[2]) + "." + str(folderid)))
                else:
                    text = utility.strike(el[1])
                    complete_task.append([emojize("Ô∏è‚úÖ ") + emojize(el[0]) + text + " ‚úè", "t.task." + str(el[2]) + "." + str(folderid)])
            for el in complete_task:
                self.markup.add(self.set_inline_btn(el[0], el[1]))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "f." + str(folderid)))
        return self.markup

    def show_task_in_shared_folder(self, friendid, folderid, ):
        '''
        –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–¥–∞—á –≤ –ø–∞–ø–∫–µ
        '''
        self.markup = InlineKeyboardMarkup(row_width=2)
        if bool(self.BD.select_all_tasks_from_folder(friendid, folderid)):
            print("del_all_task_in_bufer", self.BD.del_all_task_in_bufer(friendid))
            complete_task = []
            for el in self.BD.select_all_tasks_from_folder(friendid, folderid):
                if el[3]:
                    self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]) , "t.listshared." + str(el[2]) + "." + str(folderid)+ "." + str(folderid)))
                else:
                    text = utility.strike(el[1])
                    complete_task.append([emojize("Ô∏è‚úÖ ") + emojize(el[0]) + text, "t.listshared." + str(el[2]) + "." + str(folderid)])
            for el in complete_task:
                self.markup.add(self.set_inline_btn(el[0], el[1]))
        self.markup.row(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "t.back1."  + str(folderid)), self.set_inline_btn(emojize("‚ö™Ô∏è –í—ã–±—Ä–∞—Ç—å"), "t.choise." + str(folderid)))
        return self.markup


    def show_task_edit_options(self, taskid):
        '''
        –≤—ã–≤–æ–¥–∏—Ç –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        '''
        folderid = self.BD.task_location(taskid)
        self.markup = InlineKeyboardMarkup(row_width=3)
        self.markup.row(self.set_inline_btn(emojize("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"), "t.rename."  + str(taskid)),
                        self.set_inline_btn(emojize("üåÖ –ó–Ω–∞—á–æ–∫"), "t.reicon."  + str(taskid)),
                        self.set_inline_btn(emojize("‚ùå –£–¥–∞–ª–∏—Ç—å"), "t.del."  + str(taskid)))
        self.markup.row(self.set_inline_btn(emojize("üì§ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"), "t.reloc."  + str(taskid)),
                        self.set_inline_btn(emojize("üì£ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), "t.remind."  + str(taskid)),
                        self.set_inline_btn(emojize("üóì –°–æ–±—ã—Ç–∏–µ"), "t.event."  + str(taskid)))
        self.markup.row(self.set_inline_btn(emojize("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"), "t.slide.l."  + str(taskid)),
                        self.set_inline_btn(emojize("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"), "t.slide.r."  + str(taskid)))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "f."  + str(folderid)))
        return self.markup



    def show_relocate_folder(self, idfolder, taskid, teleid):
        self.markup = InlineKeyboardMarkup(row_width=2)
        '''
        –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        '''
        if bool(self.BD.select_all_folders_from_user(teleid)):
            for el in self.BD.select_all_folders_from_user(teleid):
                if el[2] != idfolder:
                    self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]), "t.relocdo." + str(taskid) + "." + str(el[2])))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "t.task." + str(taskid)))
        return self.markup


    def show_task_for_choise(self, teleid, folderid):
        '''
        –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–¥–∞—á –≤ –ø–∞–ø–∫–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
        '''
        choise = self.BD.show_task_bufer(teleid)
        self.markup = InlineKeyboardMarkup(row_width=2)
        if not self.BD.is_folder_owner(folderid, teleid):
            teleid = self.BD.find_teleid(self.BD.folder_owner(folderid))
        alltask = self.BD.select_all_tasks_from_folder(teleid, folderid)
        if bool(alltask):
            complete_task = []
            for el in self.BD.select_all_tasks_from_folder(teleid, folderid):
                if el[2] not in choise and el[3]:
                    print("choise", choise, el[2])
                    self.markup.add(self.set_inline_btn("‚ö™Ô∏è" + emojize(el[0]) + " " + emojize(el[1]), "t.choisetask." + str(el[2])))
                elif el[2] in choise and el[3]:
                    self.markup.add(self.set_inline_btn("üîò" + emojize(el[0]) + " " + emojize(el[1]), "t.choisetask." + str(el[2])))
                elif el[2] not in choise and not el[3]:
                    text = utility.strike(el[1])
                    complete_task.append(["‚ö™Ô∏èÔ∏è" + emojize(el[0]) + text, "t.choisetask." + str(el[2])])
                elif el[2] in choise and not el[3]:
                    text = utility.strike(el[1])
                    complete_task.append(["üîò" + emojize(el[0]) + " " + text, "t.choisetask." + str(el[2])])
            for el in complete_task:
                self.markup.add(self.set_inline_btn(el[0], el[1]))
        if len(choise) == len(alltask):
            text = "‚ö™Ô∏èÔ∏è –°–Ω—è—Ç—å –≤—ã–±–æ—Ä"
        else:
            text = "üîò –í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        self.markup.row(self.set_inline_btn(emojize("üì§ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"), "t.massreloc." + str(folderid)), self.set_inline_btn(emojize(text), "t.select." + str(folderid)), self.set_inline_btn(emojize("‚ùå –£–¥–∞–ª–∏—Ç—å"), "t.massdel." + str(folderid)))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –û—Ç–º–µ–Ω–∞"), "f." + str(folderid)))
        return self.markup

    def show_relocate_folder_mass(self, teleid, idfolder):
        '''
        –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á
        '''
        self.markup = InlineKeyboardMarkup(row_width=2)

        tasks = self.BD.show_task_bufer(teleid)
        if bool(tasks):
            for el in self.BD.select_all_folders_from_user(teleid):
                if el[2] != idfolder:
                    self.markup.add(self.set_inline_btn(emojize(el[0]) + " " + emojize(el[1]), "t.relocdomass." + str(el[2])))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "f." + str(idfolder)))
        return self.markup

    #–†–∞–±–æ—Ç–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    def set_inline_events(self, teleid):
        '''
        –ú–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
        '''
        self.markup = InlineKeyboardMarkup(row_width=2)
        events = self.BD.show_event_list(teleid)
        if events:
            for el in events:
                self.markup.add(self.set_inline_btn(el[2].strftime('%d.%m.%Y') + " " + emojize(el[0]) + " " + emojize(el[1]) , "e.list." + str(el[3])))
        self.markup.row(self.set_inline_btn(emojize("üìã –û—Ç—á–µ—Ç"), "e.everyday_events"), self.set_inline_btn(emojize("‚ö™Ô∏è –í—ã–±—Ä–∞—Ç—å"), "e.chouse"))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "back"))
        return self.markup



    def event_edit(self, eventid, context):
        '''
        –ú–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        '''

        self.markup = InlineKeyboardMarkup(row_width=3)
        self.markup.row(self.set_inline_btn(emojize("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"), "e.rename."  + str(eventid)),
                        self.set_inline_btn(emojize("üåÖ –ó–Ω–∞—á–æ–∫"), "e.reicon."  + str(eventid)),
                        self.set_inline_btn(emojize("‚ùå –£–¥–∞–ª–∏—Ç—å"), "e.del."  + str(eventid)))
        self.markup.row(self.set_inline_btn(emojize("üìÜ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"), "e.changedate."  + str(eventid)),
                        self.set_inline_btn(emojize("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å"), "e.period."  + str(eventid)),
                        self.set_inline_btn(emojize("‚è∞ –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è"), "e.alarm."  + str(eventid)))
        self.markup.row(self.set_inline_btn(emojize("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"), "e.slide.l."  + str(eventid)),
                        self.set_inline_btn(emojize("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"), "e.slide.r."  + str(eventid)))
        self.markup.add(self.set_inline_btn(emojize("‚è™ –ù–∞–∑–∞–¥"), "e.back."  + str(context)))
        return self.markup





