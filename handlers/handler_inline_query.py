# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Ä–æ–¥–∏—Ç–µ–ª—å
from handlers.handler import Handler
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

from settings import config
from emoji import emojize
import os
from datetime import datetime

class HandlerInlineQuery(Handler):
    """
    –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
    —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫–∏
    """

    def __init__(self, bot):
        super().__init__(bot)

    # –ú–µ–Ω—é "–í—Ö–æ–¥—è—â–∏–µ"


    def pressed_btn_inbox(self, call, code, code2):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö
        """
        if code == "1":
            self.BD.del_all_task_in_bufer(call.from_user.id)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_inbox_task(call.from_user.id))
        elif code == "2":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_inbox_event(call.from_user.id))
        elif code == "task":
            self.BD.change_inbox_active(int(code2))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                              f"<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_inbox(call.from_user.id))
        elif code == "choise":
            choise = self.BD.show_task_bufer(call.from_user.id)
            if int(code2) not in choise:
               self.BD.add_task_bufer(int(code2), call.from_user.id)
               print("no", choise, int(code2))
            else:
                self.BD.del_task_from_bufer(int(code2), call.from_user.id)
                print("yes", choise, int(code2))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                             f'<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞',
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_inbox_task(call.from_user.id))
        elif code == "folder":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            try:
                if bool(self.BD.show_task_bufer(call.from_user.id)):
                    text = f'<code>–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏'
                else:
                    text = "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏"
                self.bot.send_message(call.from_user.id,
                             text,
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_relocate_folder_inbox(call.from_user.id))
            except:
                self.bot.send_message(call.from_user.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏',
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif code == "relocdomass":
            inboxes = self.BD.show_task_bufer(call.from_user.id)
            self.BD.del_all_task_in_bufer(call.from_user.id)
            for el in inboxes:
                name = self.BD.get_inbox_name(el)
                print(el)
                print(name)
                self.BD.add_task(name, int(code2), call.from_user.id)
                self.BD.del_inbox_task(call.from_user.id, el)
            userid = self.BD.select_user_id(call.from_user.id)
            folder = self.BD.find_folder(int(code2), userid)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                              f"<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –ø–∞–ø–∫—É {folder[0]} {folder[1]}",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_inbox(call.from_user.id))
        elif code == "del":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            inboxes = self.BD.show_task_bufer(call.from_user.id)
            self.BD.del_all_task_in_bufer(call.from_user.id)
            try:
                if bool(inboxes):
                    for el in inboxes:
                        self.BD.del_inbox_task(call.from_user.id, el)
                    text = f'<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'
                else:
                    text = f'<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏'
                self.bot.send_message(call.from_user.id,
                             text,
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_inbox_task(call.from_user.id))
            except:
                self.bot.send_message(call.from_user.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏',
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif code == "event":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            config.inbox[call.from_user.id] = False
            config.eventdate[call.from_user.id] = int(code2)
            self.bot.send_message(call.from_user.id,
                            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY:",
                            parse_mode="HTML",
                            reply_markup=self.keybords.back_menu())
        elif code == "select":
            '''
            –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤–æ –≤—Ö–æ–¥—è—â–∏—Ö
            '''
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            choise = self.BD.show_task_bufer(call.from_user.id)
            all_inbox = self.BD.select_all_inbox_by_user(call.from_user.id)
            if len(all_inbox) == len(choise):
                self.BD.del_all_task_in_bufer(call.from_user.id)
            else:
                for el in all_inbox:
                    if el[1] not in choise:
                        self.BD.add_task_bufer(el[1], call.from_user.id)
                    # print("no", choise, el[1])
            self.bot.send_message(call.from_user.id,
                                  f'<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.set_inline_inbox_task(call.from_user.id))




    def pressed_btn_inbox_del(self, call, code):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö
        """
        if code == "back":
            inbox_list = self.BD.select_all_inbox_by_user(call.from_user.id)
            text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
            if not inbox_list:
                text = "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f"<code>üì• –í—Ö–æ–¥—è—â–∏–µ:</code>\n\n\n{text}",
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_inbox(call.from_user.id))
        else:
            try:
                self.BD.del_inbox_task(call.from_user.id, int(code))
            except ReferenceError:
                self.Log.write_log("user id: " + str(call.from_user.id) + ". –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î. –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
            # self.bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_inbox_delete(call.from_user.id))


    # –ú–µ–Ω—é "–ü–∞–ø–∫–∏"
    def pressed_btn_folder(self, call, code, code2 = False, code3 = False):
        if config.welcomemsg[call.from_user.id]:
                    print(config.welcomemsg[call.from_user.id], call.message.message_id)
                    self.bot.delete_message(call.from_user.id, config.welcomemsg[call.from_user.id])

                    config.welcomemsg[call.from_user.id] = False
        if code == "new":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            config.inbox[call.from_user.id] = False
            config.foldername[call.from_user.id] = "New"
            self.bot.send_message(call.from_user.id,
                              "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏",
                                parse_mode="HTML",
                                reply_markup=self.keybords.cancel_menu())
        elif code == "edit":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_folders_edit(call.from_user.id))
        elif code == "mine":
            config.taskname[call.from_user.id] = False
            config.inbox[call.from_user.id] = True
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                              f"üìö –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–∞–ø–æ–∫:",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_folders(call.from_user.id))
        elif code == "editfolder":
            if not self.BD.is_folder_owner(int(code2), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(code2)))
            else:
                teleid = call.from_user.id
            userid = self.BD.select_user_id(teleid)
            folder = self.BD.find_folder(int(code2), userid)
            teg = self.BD.if_teg(int(code2))
            if not teg:
                teg = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            if teleid == call.from_user.id:
                self.bot.send_message(call.from_user.id,
                              emojize(f"<code>–ü–∞–ø–∫–∞ {folder[0]} {folder[1]}</code>\n\n–¢–µ–≥ –ø–∞–ø–∫–∏: <code>{teg}</code>\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
                              parse_mode="HTML",
                              reply_markup= self.keybords.edit_folder_settings(int(code2)))
            else:

                self.bot.send_message(call.from_user.id,
                              emojize(f"–ü–∞–ø–∫–∞ <code>{folder[0]} {folder[1]}</code> (–í–Ω–µ—à–Ω—è—è –ø–∞–ø–∫–∞)\n<b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b>  {config.access_level[folder[4]]}\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
                              parse_mode="HTML",
                              reply_markup= self.keybords.edit_shared_folder_settings(int(code2)))
        elif code == "del":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            try:
                self.BD.del_folder(call.from_user.id, int(code2))
            except:
                self.bot.send_message(call.from_user.id,
                                  f'<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>\n\n\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_folders(call.from_user.id))
            # self.bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
            self.bot.send_message(call.from_user.id,
                                  f'<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>\n\n\n–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_folders(call.from_user.id))
        elif code == "rename":
            config.foldername[call.from_user.id] = int(code2)
            config.inbox[call.from_user.id] = False
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'<code>üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏</code>\n\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.cancel_menu())
        elif code == "reicon":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                              f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö emoji:',
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_emoji(code2, "folder"))
        elif code == "newicon":
            if code2 == "next":
                self.bot.delete_message(call.from_user.id, call.message.message_id)
                self.bot.send_message(call.from_user.id,
                                  f"<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>\n\n\n–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –∑–Ω–∞—á–æ–∫:",
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.set_inline_folders(call.from_user.id))
            else:
                self.BD.add_emoji(config.FICON[int(code2)], int(code3), call.from_user.id)
                self.bot.delete_message(call.from_user.id, call.message.message_id)
                self.bot.send_message(call.from_user.id,
                                  f"<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>\n\n\n–ó–Ω–∞—á–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω:",
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.set_inline_folders(call.from_user.id))
        elif code == "teg":
            config.addfolderteg[call.from_user.id] = int(code2)
            config.inbox[call.from_user.id] = False
            teg = self.BD.if_teg(int(code2))
            if not teg:
                teg = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'–¢–µ–∫—É—â–∏–π —Ç–µ–≥: <code>{teg}</code>\n\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.cancel_menu())
        elif code == "share":
            userid = self.BD.select_user_id(call.from_user.id)
            folder = self.BD.find_folder(int(code2), userid)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            is_shared = self.BD.is_already_share(int(code2))
            if is_shared[0]:
                self.bot.send_message(call.from_user.id,
                                  f'<code>{folder[0]} {folder[1]}</code>\n\n\n–ö —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: <code>{is_shared[0]}</code>\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <code>{config.access_level[is_shared[1]]}</code>',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.folder_shared(code2))
            else:
                self.bot.send_message(call.from_user.id,
                                  f'<code>{folder[0]} {folder[1]}</code>\n\n\n–ö —ç—Ç–æ–π –ø–∞–ø–∫–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.folder_not_shared(code2))


        elif code == "slide":
            folder_list = self.BD.select_all_folders_from_user(call.from_user.id)
            id_el = 0
            userid = self.BD.select_user_id(call.from_user.id)
            for el in folder_list:
                if el[2] == int(code3):
                    id_el = folder_list.index(el)
            if id_el == len(folder_list) - 1:
                right = folder_list[0]
                left = folder_list[id_el - 1]
            elif id_el == 0:
                left = folder_list[-1]
                right = folder_list[id_el + 1]
            else:
                right = folder_list[id_el + 1]
                left = folder_list[id_el - 1]
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            print("right", right)
            if code2 == "l":
                folder = self.BD.find_folder(left[2], userid)
                self.bot.send_message(call.from_user.id,
                             f'<code>–ü–∞–ø–∫–∞ {folder[0]} {folder[1]}</code>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                              parse_mode="HTML",
                              reply_markup= self.keybords.edit_folder_settings(left[2]))
            elif code2 == "r":
                folder = self.BD.find_folder(right[2], userid)
                self.bot.send_message(call.from_user.id,
                             f'<code>–ü–∞–ø–∫–∞ {folder[0]} {folder[1]}</code>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                              parse_mode="HTML",
                              reply_markup= self.keybords.edit_folder_settings(right[2]))
        elif code == "sharedtask":
            text = ""
            folder = self.BD.find_folder(int(code2), int(code3))
            print(folder[3])
            friendteleid = self.BD.find_teleid(int(code3))
            if self.BD.is_folder_owner(int(code2), call.from_user.id) or (folder[4] in [2,3,4]):
                config.inbox[call.from_user.id] = False
                config.taskname[call.from_user.id] = int(code2)
            if not self.BD.select_all_tasks_from_folder(friendteleid, int(code2)):
                text = "\nüï∏ –í —ç—Ç–æ–π –ø–∞–ø–∫–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ"
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            if folder[3]:
                friendid = self.BD.find_teleid(int(code3))
                friend = "<b>–í–ª–∞–¥–µ–ª–µ—Ü –ø–∞–ø–∫–∏:</b>  " + "<code>" + str(friendid) + "</code>"
            self.bot.send_message(call.from_user.id,
                                  f'<code>{folder[0]} {folder[1]}</code> (–í–Ω–µ—à–Ω—è—è –ø–∞–ø–∫–∞)\n\n{friend}\n<b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b>  {config.access_level[folder[4]]}\n{text}',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.show_task_in_folder(call.from_user.id, int(code2)))
        elif code == "export":
            if not self.BD.is_folder_owner(int(code2), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(code2)))
            else:
                teleid = call.from_user.id
            path = str(call.from_user.id)
            if not os.path.exists(path):
                os.mkdir(path)
            userid = self.BD.select_user_id(teleid)
            folder = self.BD.find_folder(int(code2), userid)
            filename = datetime.now().strftime('%Y_%m_%d') + "_" + folder[1] + ".csv"
            try:
                tasks = self.BD.select_all_tasks_from_folder(teleid, int(code2))
            except:
                self.bot.send_message(call.from_user.id,
                                  f'<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>\n\n\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–ø–∫–∏:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_folders(call.from_user.id))
                return False
            with open(path + "/" + filename, "w") as f:
                    complite = ["–í—ã–ø–æ–ª–Ω–µ–Ω–æ", "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]
                    f.write("–î–∞—Ç–∞;–ù–∞–∑–≤–∞–Ω–∏–µ;–û—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏\n")
                    for el in tasks:
                        f.write(el[4].strftime('%Y.%m.%d %H:%M:%S') +";" +el[1] + ";"+ complite[int(el[3])] + "\n")
            self.bot.send_document(call.from_user.id, open(path + "/" + filename, 'rb'))
        else:
            self.BD.del_all_task_in_bufer(call.from_user.id)
            text = ""
            if not self.BD.is_folder_owner(int(code), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(code)))
            else:
                teleid = call.from_user.id
            friend = ""
            userid = self.BD.select_user_id(teleid)
            folder = self.BD.find_folder(int(code), userid)
            if self.BD.is_folder_owner(int(code), call.from_user.id) or (folder[4] in [2,3,4]):
                config.inbox[call.from_user.id] = False
                config.taskname[call.from_user.id] = int(code)
            if not self.BD.select_all_tasks_from_folder(teleid, int(code)):
                text = "\n–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ"
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            teg = folder[2]
            if not teg:
                teg = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            if folder[3]:
                friend = "<b>–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b>  " + "<code>" + str(folder[3]) + "</code>"
            self.bot.send_message(call.from_user.id,
                                  f'<code>{folder[0]} {folder[1]}</code>\n\n<b>–¢–µ–≥:</b>  <code>{teg}</code>\n{friend}\n{text}',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.show_task_in_folder(call.from_user.id, int(code)))


    def share_folder(self, call, code, code2, code3 = None):
        if code == "invite":
            userid = self.BD.select_user_id(call.from_user.id)
            folder = self.BD.find_folder(int(code2), userid)
            config.share[call.from_user.id] = int(code2)
            config.inbox[call.from_user.id] = False
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'<code>{folder[0]} {folder[1]}</code>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å <i>(ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∑–∞–π–¥—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)</i>',
                                  parse_mode="HTML", reply_markup=self.keybords.cancel_menu())
        elif code == "alvl":
            userid = self.BD.select_user_id(call.from_user.id)
            folder = self.BD.find_folder(int(code2), userid)
            friend = self.BD.change_access_lvl(int(code2), call.from_user.id, int(code3))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ <code>{folder[0]} {folder[1]}</code> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {friend} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{config.access_level[int(code3)]}"',
                                  parse_mode="HTML", reply_markup=self.keybords.set_inline_folders(call.from_user.id))
        elif code == "cancel":
            oldfriend = self.BD.cancel_access(int(code2))
            if not self.BD.is_folder_owner(int(code2), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(code2)))
            else:
                teleid = call.from_user.id
            userid = self.BD.select_user_id(teleid)
            folder = self.BD.find_folder(int(code2), userid)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'üíî–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {oldfriend} –∫ –ø–∞–ø–∫–µ {folder[0]} {folder[1]} –ø—Ä–µ–∫—Ä–∞—â–µ–Ω',
                                  parse_mode="HTML", reply_markup=self.keybords.set_inline_folders(call.from_user.id))
        elif code == "change":
            userid = self.BD.select_user_id(call.from_user.id)
            folder = self.BD.find_folder(int(code2), userid)
            access_lvl = self.BD.is_already_share(int(code2))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'<code>{folder[0]} {folder[1]}</code>\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {access_lvl[0]}: "<b>{config.access_level[access_lvl[1]]}</b>"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
                                  parse_mode="HTML", reply_markup=self.keybords.set_access_lvl(int(code2)))

    def pressed_btn_folder_del(self, call, code):
        if code == "back":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                              f"üìö –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–∞–ø–æ–∫:",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_folders(call.from_user.id))
        else:
            try:
                self.BD.del_folder(call.from_user.id, int(code))
            except:
                self.Log.write_log("user id: " + str(call.from_user.id) + ". –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î. –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É")
            # self.bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.set_inline_folders_del(call.from_user.id))


    # –ó–∞–¥–∞—á–∏
    def pressed_btn_tasks_list(self, call, code, code2 = None, fid = None):
        if code == "new":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            config.inbox[call.from_user.id] = False
            config.taskname[call.from_user.id] = int(code2)
            self.bot.send_message(call.from_user.id,
                              "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                                parse_mode="HTML",
                                reply_markup=self.keybords.cancel_menu())
        elif code == "edit":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                   f"<code>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É </code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_in_folder_for_edit(call.from_user.id, int(code2)))
        elif code == "back1":
            config.taskname[call.from_user.id] = False
            config.inbox[call.from_user.id] = True
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                              f"üìö –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–∞–ø–æ–∫:",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_folders(call.from_user.id))
        elif code == "list":
            friend = ""
            teg = ""
            if not self.BD.is_folder_owner(int(fid), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(fid)))
            else:
                teleid = call.from_user.id
            userid = self.BD.select_user_id(teleid)
            folder = self.BD.find_folder(int(fid), userid)
            if self.BD.is_folder_owner(int(fid), call.from_user.id) or (folder[4] in [1,3,4]):
                self.BD.change_complite_task(int(code2))
            if self.BD.is_folder_owner(int(fid), call.from_user.id) or (folder[4] in [2,3,4]):
                config.inbox[call.from_user.id] = False
                config.taskname[call.from_user.id] = int(fid)
            if folder[2]:
                teg = folder[2]
            else:
                teg = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            text = f"{folder[0]} <code>{folder[1]}</code>\n\n<b>–¢–µ–≥:</b> <code>{teg}</code>\n\n<i>‚ÑπÔ∏è –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –ø–∞–ø–∫—É –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã</i>"
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            if folder[3]:
                friend = "<b>–í–ª–∞–¥–µ–ª–µ—Ü –ø–∞–ø–∫–∏:</b>  " + "<code>" + str(teleid) + "</code>"
                text = f'<code>{folder[0]} {folder[1]}</code> (–í–Ω–µ—à–Ω—è—è –ø–∞–ø–∫–∞)\n\n{friend}\n<b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b>  {config.access_level[folder[4]]}\n'
            self.bot.send_message(call.from_user.id,
                                  text,
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.show_task_in_folder(call.from_user.id, int(fid)))
        elif code == "select":
            ''' –í—ã–±–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –ø–∞–ø–∫–µ '''
            if not self.BD.is_folder_owner(int(code2), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(code2)))
            else:
                teleid = call.from_user.id
            userid = self.BD.select_user_id(teleid)
            folder = self.BD.find_folder(int(code2), userid)
            choise = self.BD.show_task_bufer(call.from_user.id)
            print("select", choise)
            all_tasks = self.BD.select_all_tasks_from_folder(teleid, int(code2))
            if len(choise) == len(all_tasks):
                self.BD.del_all_task_in_bufer(call.from_user.id)
            else:
                for el in all_tasks:
                    if el[2] not in choise:
                        self.BD.add_task_bufer(el[2], call.from_user.id)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'<code>{folder[0]} {folder[1]}</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–∏',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.show_task_for_choise(call.from_user.id, int(code2)))
        elif code == "task":
            task = self.BD.task_name(int(code2))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                                  f'<code>–ó–∞–¥–∞—á–∞ {task[0]} {task[1]}</code>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.show_task_edit_options(int(code2)))
        elif code == "rename":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            config.inbox[call.from_user.id] = False
            config.taskrename[call.from_user.id] = int(code2)
            self.bot.send_message(call.from_user.id,
                              "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                                parse_mode="HTML",
                                reply_markup=self.keybords.cancel_menu())
        elif code == "reicon":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                              f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö emoji:',
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_emoji(code2, "task"))
        elif code == "newicon":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            if code2 == "next":
                task = self.BD.task_name(int(fid))
                self.bot.send_message(call.from_user.id,
                                  f'<code>–ó–∞–¥–∞—á–∞ {task[0]} {task[1]}</code>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.show_task_edit_options(int(fid)))
            else:
                # print(int(fid), config.TICON[int(code2)])
                oldicon = self.BD.task_icon(int(fid), config.TICON[int(code2)])
                print(oldicon)
                self.bot.send_message(call.from_user.id,
                                 f'<code>–ó–∞–¥–∞—á–∞ {config.TICON[int(code2)]} {oldicon[1]}</code>\n\n\n–ó–Ω–∞—á–æ–∫ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ {oldicon[0]} ‚û°Ô∏è {config.TICON[int(code2)]}',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.show_task_edit_options(int(fid)))
        elif code == "del":
            try:
                idfolder = self.BD.task_location(int(code2))
                if not self.BD.is_folder_owner(int(idfolder), call.from_user.id):
                    teleid = self.BD.find_teleid(self.BD.folder_owner(int(idfolder)))
                else:
                    teleid = call.from_user.id
                userid = self.BD.select_user_id(teleid)
                folder = self.BD.find_folder(idfolder, userid)
                taskdel = self.BD.task_del(int(code2))
                self.bot.delete_message(call.from_user.id, call.message.message_id)
                self.bot.send_message(call.from_user.id,
                             f'<code>{folder[0]} {folder[1]}</code>\n\n\n–ó–∞–¥–∞—á–∞ {taskdel[0]} {taskdel[1]} —É–¥–∞–ª–µ–Ω–∞',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_in_folder(call.from_user.id, idfolder))
            except:
                self.bot.send_message(call.from_user.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif code == "reloc":
            try:
                idfolder = self.BD.task_location(int(code2))
                task = self.BD.task_name(int(code2))
                self.bot.delete_message(call.from_user.id, call.message.message_id)
                self.bot.send_message(call.from_user.id,
                             f'<code>–ó–∞–¥–∞—á–∞ {task[0]} {task[1]}</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_relocate_folder(idfolder, int(code2), call.from_user.id))
            except:
                self.bot.send_message(call.from_user.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É')

        elif code == "relocdo":
            status = self.BD.change_task_location(int(code2), int(fid))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            task = self.BD.task_name(int(code2))
            if status:
                userid = self.BD.select_user_id(call.from_user.id)
                folder = self.BD.find_folder(int(fid), userid)
                self.bot.send_message(call.from_user.id,
                             f'<code>–ó–∞–¥–∞—á–∞ {task[0]} {task[1]}</code>\n\n\n–ó–∞–¥–∞—á–∞ {task[0]} {task[1]} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –ø–∞–ø–∫—É {folder[0]} {folder[1]}',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_edit_options(int(code2)))
        elif code == "remind":
            pass





        elif code == "slide":
            idfolder = self.BD.task_location(int(fid))
            if not self.BD.is_folder_owner(int(idfolder), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(idfolder)))
            else:
                teleid = call.from_user.id

            all_task_list = self.BD.select_all_tasks_from_folder(teleid, idfolder)
            task_list = []
            for el in all_task_list:
                if el[3]:
                    task_list.append(el)
            id_el = 0
            for el in task_list:
                if el[2] == int(fid):
                    id_el = task_list.index(el)
            if id_el == len(task_list) - 1:
                right = task_list[0]
                left = task_list[id_el - 1]
            elif id_el == 0:
                left = task_list[-1]
                right = task_list[id_el + 1]
            else:
                right = task_list[id_el + 1]
                left = task_list[id_el - 1]
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            print("right", right)
            if code2 == "l":
                task = self.BD.task_name(left[2])
                self.bot.send_message(call.from_user.id,
                             f'<code>–ó–∞–¥–∞—á–∞ {task[0]} {task[1]}</code>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_edit_options(left[2]))
            elif code2 == "r":
                task = self.BD.task_name(right[2])
                self.bot.send_message(call.from_user.id,
                             f'<code>–ó–∞–¥–∞—á–∞ {task[0]} {task[1]}</code>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_edit_options(right[2]))
        elif code == "choise":
            if not self.BD.is_folder_owner(int(code2), call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(code2)))
            else:
                teleid = call.from_user.id
            userid = self.BD.select_user_id(teleid)
            folder = self.BD.find_folder(int(code2), userid)
            print("first idf", int(code2))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                             f'<code>{folder[0]} {folder[1]}</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–∏',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_for_choise(call.from_user.id, int(code2)))
        elif code == "choisetask":
            idfolder = self.BD.task_location(int(code2))
            if not self.BD.is_folder_owner(idfolder, call.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(idfolder))
            else:
                teleid = call.from_user.id
            userid = self.BD.select_user_id(teleid)

            idfolder = self.BD.task_location(int(code2))
            folder = self.BD.find_folder(idfolder, userid)
            print("idf",idfolder)
            choise = self.BD.show_task_bufer(call.from_user.id)
            if int(code2) not in choise:
               self.BD.add_task_bufer(int(code2), call.from_user.id)
               print("no", choise, int(code2))
            else:
                self.BD.del_task_from_bufer(int(code2), call.from_user.id)
                print("yes", choise, int(code2))
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            self.bot.send_message(call.from_user.id,
                             f'<code>{folder[0]} {folder[1]}</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–∏',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_for_choise(call.from_user.id, idfolder))
        elif code == "massreloc":

            self.bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            try:
                if bool(self.BD.show_task_bufer(call.from_user.id)):
                    text = f'<code>–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á</code>\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏'
                else:
                    text = "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏"
                self.bot.send_message(call.from_user.id,
                             text,
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_relocate_folder_mass(call.from_user.id, int(code2)))
            except:
                self.bot.send_message(call.from_user.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏',
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif code == "relocdomass":
            self.bot.delete_message(call.from_user.id, call.message.message_id)
            try:
                tasks = self.BD.show_task_bufer(call.from_user.id)
                self.BD.del_all_task_in_bufer(call.from_user.id)
                for el in tasks:
                    status = self.BD.change_task_location(el, int(code2))

                userid = self.BD.select_user_id(call.from_user.id)
                folder = self.BD.find_folder(int(code2), userid)
                self.bot.send_message(call.from_user.id,
                                 f'<code>{folder[0]} {folder[1]}</code>\n\n\n–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É {folder[0]} {folder[1]}',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.show_task_in_folder(call.from_user.id, int(code2)))
            except:
                self.bot.send_message(call.from_user.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏',
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif code == "massdel":
            try:
                if not self.BD.is_folder_owner(int(code2), call.from_user.id):
                    teleid = self.BD.find_teleid(self.BD.folder_owner(int(code2)))
                else:
                    teleid = call.from_user.id
                userid = self.BD.select_user_id(teleid)
                print(userid)
                folder = self.BD.find_folder(int(code2), userid)
                tasks = self.BD.show_task_bufer(call.from_user.id)
                self.BD.del_all_task_in_bufer(call.from_user.id)
                if tasks:
                    for el in tasks:
                        taskdel = self.BD.task_del(el)
                    print(taskdel)
                    text = "–ó–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã"
                else:
                    text = "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏"
                self.bot.delete_message(call.from_user.id, call.message.message_id)
                self.bot.send_message(call.from_user.id,
                             f'<code>{folder[0]} {folder[1]}</code>\n\n\n{text}',
                              parse_mode="HTML",
                              reply_markup= self.keybords.show_task_in_folder(call.from_user.id, int(code2)))
            except:
                self.bot.send_message(call.from_user.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())

    #–°–æ–±—ã—Ç–∏—è

    def pressed_btn_event(self, call, code, code2 = None, code3 = None):
        self.bot.delete_message(call.from_user.id, call.message.message_id)
        #–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if code == "rename":
            config.eventname[call.from_user.id] = int(code2)
            config.inbox[call.from_user.id] = False
            self.bot.send_message(call.from_user.id,
                                  f'<code>üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</code>\n\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.cancel_menu())
        elif code == "reicon":
            self.bot.send_message(call.from_user.id,
                              f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö emoji:',
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_emoji(code2, "event"))
        elif code == "newicon":
                oldicon = self.BD.add_event_emoji(config.EICON[int(code2)], int(code3))
                event = self.BD.show_event_info(int(code3))
                text = ""
                print("oldicon", oldicon, "event", event)
                if oldicon:
                    text = 'c ' + oldicon
                    print("oldicon true")
                self.bot.send_message(call.from_user.id,
                                  f"–°–æ–±—ã—Ç–∏–µ {event[0]} <b>{event[1]}</b>\n\n–ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ {text} –Ω–∞ {event[0]}\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.event_edit(int(code2), "eventlist"))
        elif code == "list":
            print(code2)
            event = self.BD.show_event_info(int(code2))
            self.bot.send_message(call.from_user.id,
                                  f"<b>–°–æ–±—ã—Ç–∏–µ {event[0]} {event[1]}</b>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  parse_mode="HTML",
                                   reply_markup=self.keybords.event_edit(int(code2), "eventlist"))
        elif code == "back":
            if code2 == "eventlist":
                event_list = self.BD.show_event_list(call.from_user.id)
                text = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"
                if not event_list:
                    text = "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
                self.bot.send_message(call.from_user.id,
                                      f"<code>üóì –°–æ–±—ã—Ç–∏—è</code>\n\n\n{text}",
                                      parse_mode="HTML",
                                      reply_markup= self.keybords.set_inline_events(call.from_user.id))
            elif code2 == "inbox":
                inbox_list = self.BD.select_all_inbox_by_user(call.from_user.id)
                text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
                if not inbox_list:
                    text = "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
                self.bot.send_message(call.from_user.id,
                                      f"<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n{text}",
                                      parse_mode="HTML",
                                      reply_markup= self.keybords.set_inline_inbox(call.from_user.id))




    #–í—ã—Ö–æ–¥ –∏–∑ –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ
    def pressed_btn_back(self, call):
        self.bot.delete_message(call.from_user.id, call.message.message_id)
        self.bot.send_message(call.from_user.id,
                              "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              reply_markup=self.keybords.start_menu())


    def handle(self):
        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫(–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä) –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞.
        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_inline(call):
            code = call.data.split(".")
            print(code)
            if code[0] == "back":
                self.pressed_btn_back(call)
            if code[0] == "i":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö
                self.pressed_btn_inbox(call, code[1], code[2])
            if code[0] == "d":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö
                self.pressed_btn_inbox_del(call, code[1])

            if code[0] == "f":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
                if len(code) == 2:
                    self.pressed_btn_folder(call, code[1])
                elif len(code) == 3:
                    self.pressed_btn_folder(call, code[1], code[2])
                elif len(code) == 4:
                    self.pressed_btn_folder(call, code[1], code[2], code[3])

            if code[0] == "fd":
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
                self.pressed_btn_folder_del(call, code[1])

            if code[0] == "t":
                # –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–µ–π –≤ —Å–ø–∏—Å–∫–µ
                if len(code) == 3:
                    self.pressed_btn_tasks_list(call, code[1], code[2])
                elif len(code) == 4:
                    self.pressed_btn_tasks_list(call, code[1], code[2], code[3])

            if code[0] =="s":
                # —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
                if len(code) == 3:
                    self.share_folder(call, code[1], code[2])
                elif len(code) == 4:
                    self.share_folder(call, code[1], code[2], code[3])

            if code[0] =="e":
                if len(code) == 3:
                    self.pressed_btn_event(call, code[1], code[2])
                elif len(code) == 4:
                    self.pressed_btn_event(call, code[1], code[2], code[3])
