from settings.message import MESSAGES
from handlers.handler import Handler
from settings import config

from emoji import emojize
from random import randint
from datetime import datetime
from datetime import timedelta

class HendlerAllText(Handler):
    # –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É



    def __int__(self, bot):
        super().__init__(bot)



    def first_location(self, message):
        timezone = datetime.fromtimestamp(message.date) - datetime.now()
        self.BD.add_utc(message.from_user.id, timezone)


    def add_new_event(self, message):
        first = message.text.split(" ")
        if "/" in first[0]:
            date = first[0].split("/")
        elif ":" in first[0]:
            date = first[0].split(":")






    def get_inbox(self, message):
        url = False
        if message.text[:3] == "http":
            url = "message.text"
        try:
            msg, teg = message.text.split("#")
        except:
            msg = message.text
            teg = False
        idfolder = False
        if teg:
            idfolder = self.BD.find_teg(teg, message.from_user.id)
        if idfolder:
            try:
                self.BD.add_task(msg, idfolder, message.from_user.id)
                userid = self.BD.select_user_id(message.from_user.id)
                folder = self.BD.find_folder(idfolder, userid)
                print("teg", idfolder)
                self.bot.send_message(message.chat.id, emojize(f'üì• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É <code> {folder[0]} {folder[1]}</code>'),  parse_mode="HTML")
            except:
                self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'),
                                            parse_mode="HTML")
        else:
            if url:
                try:
                    inboxid = self.BD.add_url_inbox(msg, message.from_user.id)
                    config.is_url[message.from_user.id] = inboxid
                    config.inbox[message.from_user.id] = False
                    self.bot.send_message(message.chat.id, emojize(f'–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
                                        parse_mode="HTML",
                                        reply_markup=self.keybords.back_menu())
                except:
                    self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏'),
                                        parse_mode="HTML",
                                        reply_markup=self.keybords.back_menu())
            else:
                try:
                    self.BD.add_inbox(msg, message.from_user.id)
                    print("ok")
                    if teg and not idfolder:
                        self.bot.send_message(message.chat.id, emojize(f'üì• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ", —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–µ–≥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'),
                                                parse_mode="HTML")
                    else:
                        self.bot.send_message(message.chat.id, emojize(f'üì• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ"'))
                except:
                    self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'),
                                            parse_mode="HTML",
                                            reply_markup=self.keybords.back_menu())

    def rename_inbox(self, message, inboxid):
        config.is_url[message.from_user.id] = False
        config.inbox[message.from_user.id] = True
        status = self.BD.inbox_rename(message.from_user.id, message.text, inboxid)
        if status:
            self.bot.send_message(message.chat.id, emojize(f'üì• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ"'),
                                                parse_mode="HTML")
        else:
            self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è'),
                                                parse_mode="HTML")


    def send_inbox_list(self, teleid):
        # self.bot.send_message(message.chat.id,MESSAGES['order_number'].format(
        #     self.step+1), parse_mode="HTML")
        inbox_list = self.BD.select_all_inbox_by_user(teleid)
        text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
        if not inbox_list:
            text = "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
        self.bot.send_message(teleid,
                              f"<code>üì• –í—Ö–æ–¥—è—â–∏–µ</code>\n\n\n{text}",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_inbox(teleid))
    #–°–æ–±—ã—Ç–∏—è
    def send_events_list(self, message):
        event_list = self.BD.show_event_list(message.from_user.id)
        text = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"
        if not event_list:
            text = "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
        self.bot.send_message(message.from_user.id,
                              f"<code>üóì –°–æ–±—ã—Ç–∏—è</code>\n\n\n{text}",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_events(message.from_user.id))


    def get_event_day(self, message, inbox_id):
        date_time_obj = ""

        if ":" in message.text:
            try:
                date_time_obj = datetime.strptime(message.text, '%d:%m:%Y')
            except:
                self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: DD:MM:YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11:06:2025. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif "/" in message.text:
            try:
                date_time_obj = datetime.strptime(message.text, '%d/%m/%Y')
            except:
                self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: DD/MM/YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11/06/2025. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif "-" in message.text:
            try:
                date_time_obj = datetime.strptime(message.text, '%d-%m-%Y')
            except:
                self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: DD-MM-YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11-06-2025. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif "." in message.text:
            try:
                date_time_obj = datetime.strptime(message.text, '%d.%m.%Y')
            except:
                self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: DD.MM.YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.06.2025. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        else:
            self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: DD.MM.YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.06.2025. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        if date_time_obj and date_time_obj > datetime.now():
            try:
                print(date_time_obj)
                config.inbox[message.from_user.id] = True
                config.eventdate[message.from_user.id] = False
                name = self.BD.get_inbox_name(inbox_id)
                print(name)
                self.BD.del_inbox_task(message.from_user.id, inbox_id)
                prt = self.BD.add_new_event(name, date_time_obj, message.from_user.id)
                print(prt)
                self.bot.send_message(message.from_user.id,
                              "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Å–æ–±—ã—Ç–∏–µ",
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
                self.bot.send_message(message.from_user.id,
                                      f'<b>–°–æ–±—ã—Ç–∏–µ –•–•–•–•–•</b>\n\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.event_edit(prt, "inbox"))
                                      # reply_markup=self.keybords.set_inline_inbox_event(message.from_user.id))
            except:
                self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())
        elif date_time_obj:
            self.bot.send_message(message.from_user.id, emojize(f'‚ö†Ô∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —á–∏—Å–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())

    def get_eventname(self,message, eventid):
        try:
            oldname = self.BD.event_rename(eventid, message.text)
            config.eventname[message.from_user.id] = False
            config.inbox[message.from_user.id] = True
            self.bot.send_message(message.from_user.id,
                              f'‚úÖ –°–æ–±—ã—Ç–∏–µ "{oldname}" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ "{message.text}"',
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
            self.bot.send_message(message.from_user.id,
                                  f'<code>–°–æ–±—ã—Ç–∏–µ {message.text}</code>',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.event_edit(eventid, "eventlist"))
        except:
            self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())


    def send_folders_list(self, message):
        '''
        –í—ã–≤–æ–¥ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        '''
        text = ""
        if message.text == config.KEYBOARD["FOLDERS"]:
            text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –í–∞—à–∏—Ö –ø–∞–ø–æ–∫!\n\n<i>–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –∑–∞–¥–∞—á –∏ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª</i>"
        elif message.text == config.KEYBOARD['X']:
            text =  "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ"
        self.bot.send_message(message.from_user.id,
                              text,
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
        print(message.message_id)
        config.welcomemsg[message.from_user.id] = message.message_id+1
        self.bot.send_message(message.from_user.id,
                              f"üìö –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–∞–ø–æ–∫:",
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_inline_folders(message.from_user.id))
        print(message.message_id)

    def get_foldername(self, message):
        if config.foldername[message.from_user.id] == "New":
            print(message.text, "New")
            try:
                idfolder = self.BD.add_foldername(message.text, message.from_user.id)
                print(idfolder, "ok")
                config.foldername[message.from_user.id] = False
                config.inbox[message.from_user.id] = True
                self.bot.send_message(message.from_user.id,
                              "‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
                self.bot.send_message(message.from_user.id,
                                  f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö emoji:',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.set_inline_emoji(str(idfolder), "folder"))

            except:
                self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏'),
                                    parse_mode="HTML",
                                    reply_markup=self.keybords.back_menu())
        else:
            try:
                print(config.foldername[message.from_user.id], config.inbox[message.from_user.id], config.inbox[message.from_user.id])
                set_new_name = self.BD.rename_folder(message.text, config.foldername[message.from_user.id], message.from_user.id)
                config.foldername[message.from_user.id] = False
                config.inbox[message.from_user.id] = True
                if set_new_name:
                    self.bot.send_message(message.from_user.id,
                              "‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞",
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
                    self.bot.send_message(message.from_user.id,
                                  f'<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>',
                                  parse_mode="HTML",
                                  reply_markup= self.keybords.set_inline_folders(message.from_user.id))
                else:
                    self.bot.send_message(message.chat.id, emojize(f'<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>\n\n\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏'),
                                    parse_mode="HTML",
                                    reply_markup=self.keybords.set_inline_folders(message.from_user.id))
            except:
                self.bot.send_message(message.chat.id, emojize(f'<code>–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫</code>\n\n\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏'),
                                    parse_mode="HTML",
                                    reply_markup=self.keybords.set_inline_folders(message.from_user.id))

    def get_folderteg(self, message, idfolder):
        config.addfolderteg[message.from_user.id] = False
        config.inbox[message.from_user.id] = True
        status = self.BD.add_teg(idfolder, message.text)
        print(status)
        if status:
            userid = self.BD.select_user_id(message.from_user.id)
            folder = self.BD.find_folder(idfolder, userid)
            self.bot.send_message(message.from_user.id,
                              "‚úÖ –¢–µ–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
            self.bot.send_message(message.from_user.id,
                              emojize(f"<code>–ü–∞–ø–∫–∞ {folder[0]} {folder[1]}</code>\n\n:keycap_#:–¢–µ–≥ –ø–∞–ø–∫–∏: <code>{message.text}</code>\n\n–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
                              parse_mode="HTML",
                              reply_markup= self.keybords.edit_folder_settings(idfolder))
        else:
            self.bot.send_message(message.chat.id, emojize(f'<code>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏</code>\n\n\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –ø–∞–ø–∫–µ'),
                                    parse_mode="HTML",
                                    reply_markup=self.keybords.set_inline_folders(message.from_user.id))

    def get_folder_share(self, message, idfolder):
        config.share[message.from_user.id] = False
        config.inbox[message.from_user.id] = True
        if self.BD.find_user(message.text):
            status = self.BD.share_folder(idfolder, message.text)
            if status:
                userid = self.BD.select_user_id(message.from_user.id)
                folder = self.BD.find_folder(idfolder, userid)
                self.bot.send_message(message.text,
                              f"‚úÖ  –í–∞–º –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ {folder[0]} {folder[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}",
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
                self.bot.send_message(message.from_user.id,
                              f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {folder[3]} —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ)",
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
                self.bot.send_message(message.from_user.id,
                              emojize(f"<code>–ü–∞–ø–∫–∞ {folder[0]} {folder[1]}</code>\n\n–¢–µ–≥ –ø–∞–ø–∫–∏: <code>{folder[2]}</code>\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:"),
                              parse_mode="HTML",
                              reply_markup= self.keybords.set_access_lvl(idfolder))
            else:
                self.bot.send_message(message.chat.id, emojize(f'<code>–û–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ</code>\n\n\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î'),
                                    parse_mode="HTML",
                                   reply_markup=self.keybords.back_menu())
        else:
            self.bot.send_message(message.chat.id, emojize(f'<code>–û–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ</code>\n\n\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω'),
                                    parse_mode="HTML",
                                   reply_markup=self.keybords.back_menu())


    def get_taskname(self, message, fid):
        try:
            if not self.BD.is_folder_owner(fid, message.from_user.id):
                teleid = self.BD.find_teleid(self.BD.folder_owner(int(fid)))
            else:
                teleid = message.from_user.id
            taskid = self.BD.add_task(message.text, fid, teleid)
            task = self.BD.task_name(taskid)
            # self.bot.delete_message(message.from_user.id, message.message.message_id)
            self.bot.send_message(message.from_user.id,
                                  emojize(f'<code>–ó–∞–¥–∞—á–∞ {task[0]} {task[1]}</code>\n\n‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'),
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.show_task_in_folder(message.from_user.id, fid))
        except:
            self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())

    def get_taskrename(self, message, taskid):
        try:
            oldtask = self.BD.task_rename(taskid, message.text)
            config.taskrename[message.from_user.id] = False
            config.inbox[message.from_user.id] = True
            self.bot.send_message(message.from_user.id,
                              f'‚úÖ –ó–∞–¥–∞—á–∞ "{oldtask[1]}" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "{message.text}"',
                              parse_mode="HTML",
                              reply_markup= self.keybords.remove_menu())
            self.bot.send_message(message.from_user.id,
                                  f'<code>–ó–∞–¥–∞—á–∞ {oldtask[0]} {message.text}</code>',
                                  parse_mode="HTML",
                                  reply_markup=self.keybords.show_task_edit_options(taskid))
        except:
            self.bot.send_message(message.chat.id, emojize(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã–∫–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏'),
                                parse_mode="HTML",
                                reply_markup=self.keybords.back_menu())











    def pressed_btn_settings(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ settings
        '''
        try:
            self.BD.show_settings("hard", message.from_user.id)
            self.BD.make_settings(message.from_user.id)
        except ReferenceError:
            self.Log.write_log("user id: " + str(message.from_user.id) + ". –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î. –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.bot.send_message(message.chat.id, MESSAGES['settings'],
                              parse_mode="HTML",
                              reply_markup=self.keybords.settings_menu(message.from_user.id))

    def default_settings(self, message):
        config.inbox[message.from_user.id] = True
        config.taskname[message.from_user.id] = False
        config.taskrename[message.from_user.id] = False
        config.eventdate[message.from_user.id] = False
        config.addfolderteg[message.from_user.id] = False
        config.share[message.from_user.id] = False





    def pressed_btn_back(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ back
        '''
        foldername = {}
        config.inbox[message.from_user.id] = True
        config.taskname[message.from_user.id] = False
        config.taskrename[message.from_user.id] = False
        config.eventdate[message.from_user.id] = False
        config.addfolderteg[message.from_user.id] = False
        config.share[message.from_user.id] = False
        self.bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥',
                              parse_mode="HTML",
                              reply_markup=self.keybords.start_menu())





    def handle(self):
        '''
        –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä) —Å–æ–æ–±—â–µ–Ω–∏–π
        –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
        '''

        @self.bot.message_handler(func=lambda message: True)
        def handle(message):

            #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            if message.text and self.BD.update_user_timer(message.from_user.id) > timedelta(minutes=10):
                print(f"user {message.from_user.id} timeout")
                self.default_settings(message)

            # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ—á—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω—é

            if message.text == config.KEYBOARD['<<']:
                self.pressed_btn_back(message)


            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if message.text == config.KEYBOARD["INBOX"]:
                self.send_inbox_list(message.from_user.id)
            if message.text == config.KEYBOARD["EVENT"]:
                self.send_events_list(message)

            # –ú–µ–Ω—é –∏–Ω–ª–∞–π–Ω –ø–∞–ø–æ–∫ (—Ç–∞–∫–∂–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è)

            if message.text == config.KEYBOARD["FOLDERS"] or message.text == config.KEYBOARD['X']:
                self.send_folders_list(message)

            # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –±–æ—Ç–∞

            #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ inbox
            if message.text not in config.KEYBOARD.values() and config.inbox.get(message.from_user.id, True) and message.text != "":
                self.get_inbox(message)
            #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            if message.text not in config.KEYBOARD.values() and config.is_url.get(message.from_user.id, False) and message.text != "":
                self.rename_inbox(message, config.is_url[message.from_user.id])
            #–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            if message.text not in config.KEYBOARD.values() and config.foldername.get(message.from_user.id, False) and message.text != "":
                self.get_foldername(message)
            #–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            if message.text not in config.KEYBOARD.values() and config.taskname.get(message.from_user.id, False) and message.text != "":
                self.get_taskname(message, config.taskname[message.from_user.id])
            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            if message.text not in config.KEYBOARD.values() and config.taskrename.get(message.from_user.id, False) and message.text != "":
                self.get_taskrename(message, config.taskrename[message.from_user.id])
            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            if message.text not in config.KEYBOARD.values() and config.eventname.get(message.from_user.id, False) and message.text != "":
                self.get_eventname(message, config.eventname[message.from_user.id])
            #–í–≤–æ–¥ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            if message.text not in config.KEYBOARD.values() and config.eventdate.get(message.from_user.id, False) and message.text != "":
                print(config.eventdate[message.from_user.id])
                self.get_event_day(message, config.eventdate[message.from_user.id])
            #–í–≤–æ–¥ —Ç–µ–≥–∞ –¥–ª—è –ø–∞–ø–∫–∏
            if message.text not in config.KEYBOARD.values() and config.addfolderteg.get(message.from_user.id, False) and message.text != "":
                print(config.addfolderteg[message.from_user.id])
                self.get_folderteg(message, config.addfolderteg[message.from_user.id])
            #–í–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ
            if message.text not in config.KEYBOARD.values() and config.share.get(message.from_user.id, False) and message.text != "":
                print(message)
                print(config.share[message.from_user.id])
                self.get_folder_share(message, config.share[message.from_user.id])



